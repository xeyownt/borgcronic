#! /bin/bash

# Common settings
BASE=borgcronic
LOGFILE=/var/log/$BASE
CONF=/etc/$BASE.conf
LOGROTATE=/etc/logrotate.d/$BASE
LOCKDIR=/var/lock/$BASE
PIDFILE=/var/lock/$BASE/pid
FIFOFILE=/var/run/$BASE.fifo
CRON_DAILY=/etc/cron.daily/$BASE
SYSTEMD_SERVICE=/etc/systemd/system/$BASE.service
TRY_WAIT=120               # (seconds) Delay to wait before trying again
LOGGING=

# Borg environment variables (see https://borgbackup.readthedocs.io/en/stable/usage.html)
export BORG_CACHE_DIR=/var/cache/borg
export BORG_KEYS_DIR=/var/lib/borg/keys
export BORG_SECURITY_DIR=/var/lib/borg/security
BORG_LASTSUCCESSFUL=$BORG_CACHE_DIR/$BASE.success

log()
{
    LVL=$1
    shift
    [ -n "$LOGGING" ] || LVL=0
    case "$LVL" in
        0)
            echo "$@"
            ;;
        1)
            echo "# $(date): $@"
            ;;
        2)
            echo "## $@"
            ;;
        *)
            echo "Unknown level '$LVL'"
            ;;
    esac
}

syslog()
{
    [ "$MODE" = daemon -o "$MODE" = wakeup ] && logger --id=$$ -t $BASE "$@"
    log 1 "$@"
}

die()
{
    CODE=$1
    shift
    >&2 syslog "ERROR -- $@"
    exit $CODE
}

warning()
{
    >&2 syslog "WARNING -- $@"
}

sizeof()
{
    du -sB1 "$@" | awk '{s+=$1} END {printf "%dM (%d)",s/(2**20),s}'
}

installcheck_does_not_exist()
{
    local DESC=$1
    local FILE=$2

    if [ -z "$FORCE" -a -e $FILE ]; then
        warning "Found $DESC file '$FILE', not overwriting (use '-f' to force or '-u' to update)."
        return 1
    fi
    syslog "Installing $DESC file '$FILE'."

    return 0
}

install_logrotate()
{
    if [ -d $(dirname $LOGROTATE) ]; then
        installcheck_does_not_exist "logrotate" $LOGROTATE || return

        cat > $LOGROTATE <<- __END__
			$LOGFILE
			{
			    rotate 4
			    weekly
			    missingok
			    notifempty
			    compress
			    delaycompress
			}
		__END__
        chmod 644 $LOGROTATE
    else
        warning "$(dirname $LOGROTATE) not found. Can't install logrotate script."
    fi
}

install_conf()
{
    installcheck_does_not_exist "config" $CONF || return

    if [ -e $CONF ]; then
        log 0 "Renaming old config file to '$CONF.old'"
        mv $CONF $CONF.old || die 1 "Cannot rename config file to '$CONF.old'."
    fi

    cat > $CONF <<- __END__
		## BORG_REPO - mandatory
		# BORG_REPO=username@remoteserver.com:borg
		# BORG_REPO=/smb/remoteserver/borg
		BORG_REPO=$BORG_REPO

		## DIRS - mandatory
		DIRS='/home'

		## EXCLUDES - optional
		EXCLUDES='--exclude */.cache'
		EXCLUDES+=' --exclude *.nobak'
		EXCLUDES+=' --exclude */xapiandb'
		EXCLUDES+=' --exclude */.thumbnails'
	__END__
    chmod 644 $CONF
}

install_fifo()
{
    installcheck_does_not_exist "fifo" $FIFOFILE || return

    mkfifo -m 600 $FIFOFILE
}

install_cron_daily()
{
    installcheck_does_not_exist "cron daily job" $CRON_DAILY || return

    cp $0 $CRON_DAILY
    chmod 755 $CRON_DAILY
}

install_systemd()
{
    installcheck_does_not_exist "systemd service" $SYSTEMD_SERVICE || return

    # Stop service if running
    systemctl is-active $BASE >/dev/null && systemctl stop $BASE

    cat > $SYSTEMD_SERVICE <<- __END__
		[Unit]
		Description=$BASE daemon
		After=network-online.target

		[Service]
		Type=simple

		User=root
		Group=root
		UMask=022

		ExecStart=$CRON_DAILY -D

		Restart=on-failure

		# Configures the time to wait before service is stopped forcefully.
		TimeoutStopSec=300

		[Install]
		WantedBy=multi-user.target
	__END__
    chmod 644 $SYSTEMD_SERVICE

    systemctl daemon-reload
    systemctl enable $BASE
    systemctl start $BASE
}

print_size_summary()
{
    log 2 "Borg repo: $(sizeof $BORG_REPO)"
    log 2 "Borg cache: $(sizeof $BORG_CACHE_DIR)"
}

check_root()
{
    [ $(whoami) == "root" ] || die 1 "Run this script as root or with sudo"
}

check_install_and_read_conf()
{
    # Check install
    [ -e $CONF ] || die 1 "'$CONF' not found. Did you run the install script '$BASE -i <REPOSITORY>'"
    [ -e $FIFOFILE ] || die 1 "'$FIFOFILE' not found. Did you run the install script '$BASE -i <REPOSITORY>'"

    # Read conf
    BORG_REPO=
    DIRS=
    EXCLUDES=
    . $CONF
    export BORG_REPO
    export BORG_CACHE_DIR
    export BORG_KEYS_DIR
    export BORG_SECURITY_DIR

    # Check conf
    [ -n "$BORG_REPO" ] || die 1 "BORG_REPO not defined or empty in '$CONF'."
    [ -n "$DIRS" ]       || die 1 "DIRS not defined or empty in '$CONF'."
    [ -d "$BORG_REPO" ] || die 1 "'$BORG_REPO' not found."
}

usage_help()
{
    cat <<- __END__
Usage: $BASE [-Ddfhsuv] [-i REPOSITORY] [-x ...]

$BASE only runs as root user, or using sudo.

Without any option, $BASE runs in WAKEUP mode:

    none    WAKEUP mode.
            In this mode, it sends a wakeup signal to daemon in order to 
            trigger a backup.

The other modes are:

    -D      DAEMON mode.
            $BASE waits for wakeup signal. This signal triggers a backup.
    -i REPOSITORY
            INSTALL mode.
            Install $BASE, configuration and script files, then run
            borg to initialize REPOSITORY. Use -f to force overwriting
            existing files.
    -u      UPDATE mode.
            Same as INSTALL, but does not update configuration. 
            Implies flag -f. The configuration file is NOT modified.
    -x      EXEC mode.
            Run borg, passing the remaining parameters on the line
            to borg. This is handy to run borg using $BASE configuration.

Flags or options:

    -d      Run borg in dry-run mode (only for DAEMON or EXEC mode).
    -f      Force overwriting existing files in INSTALL mode.
    -h      This help.
    -s      Display statistics on DIRS before starting the backup.
    -v      Increase verbose level.
__END__
}

read_options()
{
    # Parse options
    VERBOSE=0
    DIRS_STAT=
    DRYRUN=
    MODE=
    INSTALL_ARG=
    FORCE=

    local OPTIONS="Ddfhi:suvx?"
    while getopts "$OPTIONS" flag; do
        case "$flag" in
            D)
                # DAEMON mode
                MODE=daemon
                ;;
            d)
                # Enable dry-run
                DRYRUN=true
                ;;
            f)
                # Force flag for install mode
                FORCE=true
                ;;
            h)
                # Display help
                usage_help
                exit 0
                ;;
            i)
                # Install mode
                MODE=install
                INSTALL_ARG=$OPTARG
                ;;
            s)
                # Display DIRS statistics
                DIRS_STAT=true
                ;;
            u)
                # Update mode
                MODE=update
                FORCE=true
                ;;
            v)
                # Increase Verbose level
                VERBOSE=$((VERBOSE+1))
                ;;
            x)
                # Execute mode
                MODE=exec
                VERBOSE=1
                break
                ;;
            *)
                die 1 "Usage: $BASE [-$OPTIONS]. Type '$BASE -h' for help."
                ;;
        esac
    done

    # WAKEUP is the default mode
    MODE=${MODE:-wakeup}
}

print_log_header()
{
    log 0 "####################################################################################################"
    syslog "Starting $BASE[$$]"
}

print_log_footer()
{
    syslog "Ending $BASE[$$]"
}

doit()
{
    log 1 "## $@"
    print_size_summary
    log 0 "===================================================================================================="
    "$@"
    log 0 "===================================================================================================="
    print_size_summary
    # TODO: We must return exit status of "$@" !
}

print_dirs_stats()
{
    if [ -n "$DIRS_STAT" ]; then
        DIRS_SZ=$(sizeof $DIRS)
        DIRS_ND=$(find $DIRS -type d|wc -l)
        DIRS_NF=$(find $DIRS -type f|wc -l)
        log 2 "* $DIRS_SZ, $DIRS_ND directories, $DIRS_NF files."
    fi
}

start_logging()
{
    LOGGING=true
    [ -d $(dirname $LOGFILE) ] || mkdir -p $(dirname $LOGFILE)
    if [ $VERBOSE -ge 1 ]; then
        exec > >(tee -a $LOGFILE ) 2>&1
    else
        exec >> $LOGFILE 2>&1
    fi
}

tryborg()
{
    local SEC_STARTING=0
    local SEC_DOING=0

    syslog Starting "'borg $1'"
    SEC_STARTING=$SECONDS
    while : ; do
        # Wait for the repository to show up
        while ! [ -f $BORG_REPO/README ]; do
            sleep $TRY_WAIT
        done

        # Do action
        syslog Doing "'borg $1'"
        SEC_DOING=$SECONDS
        doit borg "$@"

        # Action successful - exit
        [ $? -eq 0 ] && break

        # Action failed - Wait then retry
        syslog Failed "'borg $1'"
        sleep $TRY_WAIT
    done

    touch $BORG_LASTSUCCESSFUL.$1
    syslog Done "'borg $1'" "(total $((SECONDS-SEC_STARTING))s, real $((SECONDS-SEC_DOING))s)"
}

borg_exec()
{
    doit borg ${DRYRUN:+--dry-run} "$@"
}

borg_create()
{
    tryborg create ${DRYRUN:+--dry-run} -v --stats -x --compression lz4 \
        ::'{hostname}-{now:%Y-%m-%d_%H%M}'                              \
        $DIRS                                                           \
        $EXCLUDES
}

borg_prune()
{
    # Use the `prune` subcommand to maintain 7 daily, 4 weekly and 6 monthly
    # archives of THIS machine. The '{hostname}-' prefix is very important to
    # limit prune's operation to this machine's archives and not apply to
    # other machine's archives also.
    tryborg prune ${DRYRUN:+--dry-run} -v --list \
        :: --prefix '{hostname}-'                \
        --keep-daily=7 --keep-weekly=4 --keep-monthly=6
}

lock_get()
{
    while ! mkdir $LOCKDIR &> /dev/null; do
        # Lock failed. Check if the other pid is alive
        OTHERPID="$(cat "$PIDFILE")" || die 99 "lock failed, but cannot get other pid."

        if ! kill -0 $OTHERPID &> /dev/null; then
            # lock is stale, remove it and retry
            # TODO: fix race condition - another script may rm $LOCKDIR && mkdir $LOCKDIR here
            rm -r "$LOCKDIR" || die 99 "lock failed, but cannot rm lockdir"
        else
            die 99 "Lock failed, '$LOCKDIR' owned by pid $OTHERPID."
        fi
    done

    # TODO: $$ is PID of parent process, not the one forked with 'main &'
    echo $$ > $PIDFILE
    trap 'trap - INT TERM EXIT; rm -rf "$LOCKDIR"; exit $?' INT TERM EXIT
}

lock_exit()
{
    exit 0
}

main()
{
    # TODO: check how it works on 1st install - must avoid repo init and/or the question about new repo
    [ -d $BORG_CACHE_DIR ] || die 1 "$BORG_CACHE_DIR not found. Did you do '$BASE -x init' first?"

    # Get the lock and print log header
    lock_get
    print_log_header

    # Print a few statistics
    print_dirs_stats

    borg_create
    borg_prune

    # End logging, release the lock and exit
    print_log_footer
    lock_exit
}

mode_daemon()
{
    # Read and check configuration
    check_install_and_read_conf

    # Start logging
    start_logging

    while : ; do
        # If in daemon mode, we wait for wake-up (WUP) signal...
        syslog "Waiting for wake-up signal..."
        read S <$FIFOFILE
        [ "$S" = "WUP" ] || continue

        main &
    done
}

mode_exec()
{
    # Read and check configuration
    check_install_and_read_conf

    borg_exec "$@"
}

mode_install()
{
    BORG_REPO=$INSTALL_ARG
    mkdir -p $BORG_REPO || die 1 "Cannot create repository dir '$BORG_REPO'"

    # Unstall configuration and scripts files
    install_conf
    install_logrotate
    install_fifo
    install_cron_daily
    install_systemd

    # Read and check configuration
    check_install_and_read_conf

    # Start logging
    start_logging

    borg_exec ${DRYRUN:+echo} init -e none :: || die 1 "borg init failed."
}

mode_update()
{
    # Read and check configuration
    check_install_and_read_conf

    # Start logging
    start_logging

    # Update configuration and scripts files
    install_logrotate
    install_fifo
    install_cron_daily
    install_systemd
}

mode_wakeup()
{
    # Read and check configuration
    check_install_and_read_conf

    # Start logging
    start_logging

    # Send wakeup signal
    syslog "Sending wakeup signal to daemon."
    echo WUP >$FIFOFILE
}

# Read CLI options
read_options "$@"
shift $((OPTIND-1))

# Must be root
check_root

# TODO: Is current locking sufficient? Do we need more to protect log file access, cache update... ?
case $MODE in
    daemon)
        mode_daemon "$@"
        ;;
    exec)
        mode_exec "$@"
        ;;
    install)
        mode_install "$@"
        ;;
    update)
        mode_update "$@"
        ;;
    wakeup)
        mode_wakeup "$@"
        ;;
esac

