#! /bin/bash

# Borg environment variables (see https://borgbackup.readthedocs.io/en/stable/usage.html)
# See also in borgcronic.conf
export BORG_CACHE_DIR=/var/cache/borg
export BORG_KEYS_DIR=/var/lib/borg/keys
export BORG_SECURITY_DIR=/var/lib/borg/security

# Common settings
BASE=borgcronic
PREFIX=/usr/local/bin
LOGFILE=/var/log/$BASE
CONF=/etc/$BASE.conf
CONF_EXCLUDE=/etc/${BASE}.exclude
LOGROTATE=/etc/logrotate.d/$BASE
[ "$OS" = "Windows_NT" ] && LOCKPREFIX="/var/run" || LOCKPREFIX=/var/lock
LOCKDIR=$LOCKPREFIX/$BASE
PIDFILE=$LOCKPREFIX/$BASE/pid
FIFOFILE=/var/run/$BASE.fifo
CRON_DAILY=/etc/cron.daily/$BASE-summon-backup
CRON_WEEKLY=/etc/cron.weekly/$BASE-summon-last
CRON_D=/etc/cron.d/$BASE
SYSTEMD_SERVICE=/etc/systemd/system/$BASE.service
CYGWIN_STARTUP_SCRIPT=$BASE-devil.vbs
TRY_WAIT=120               # (seconds) Delay to wait before trying again
LOGGING=
BORG_TS=$BORG_CACHE_DIR/$BASE-ts
LOG_PREFIX=

log()
{
    LVL=$1
    shift
    [ -n "$LOGGING" ] || LVL=0
    [ -n "$LOGGING" ] || LOG_PREFIX=
    case "$LVL" in
        0)
            >&2 echo "$LOG_PREFIX$@"
            ;;
        1)
            >&2 echo "${LOG_PREFIX:-[?] } $(date): $@"
            ;;
        *)
            >&2 echo "Unknown level '$LVL'"
            ;;
    esac
}

syslog()
{
    [ "$OS" != "Windows_NT" ] && [[ "$MODE" = daemon || "$MODE" = summon* ]] && logger --id=$BASHPID -t $BASE "$@"
    log 1 "$@"
}

die()
{
    CODE=$1
    shift
    >&2 syslog "ERROR -- $@"
    exit $CODE
}

warning()
{
    >&2 syslog "WARNING -- $@"
}

sizeof()
{
    du -sB1 "$@" | awk '{s+=$1} END {printf "%dM (%d)",s/(2**20),s}'
}

get_timestamp()
{
    LC_TIME=C date -u
}

set_op_timestamp()
{
    local OP=$1

    get_timestamp > $BORG_TS-$OP
}

get_op_timestamp()
{
    local OP=$1

    if [ -e $BORG_TS-$OP ]; then
        cat $BORG_TS-$OP
    fi
}

function using_borg_server()
{
    [[ $BORG_REPO =~ .*:.* ]]
}

case $MACHTYPE in 
    *"cygwin") HOST_MACH="cygwin" ;;
    *)         HOST_MACH="linux" ;;
esac

function ishostavail()
{
    if [ "$HOST_MACH" = "cygwin" ]; then
        ping $1 1 1 2>/dev/null | grep -q "1 packets received"
    else
        ping -c 1 -W 1 $1 2>/dev/null >/dev/null
    fi
    # nmap -sP $1 2>/dev/null | grep -q "1 host up"    # Too slow, does not always detect hosts
}

#Translate a path or ssh hostname into hostname
#
#Params:
# NAME     Path or ssh hostname
function ssh_gethost()
{
    local NAME=$1
    if [[ $NAME == */* ]]; then
        echo "localhost"
    else
        SSH_CONFIG="$(< ~/.ssh/config sed -rn 's/#.*//; s/\t/ /g; s/ +/ /g; s/[hH]ost/host/; s/[nN]ame/name/; /host |hostname/p'|sed -r ':a /host/N; /hostname/!b a; {s/\n *hostname/ hostname/; p; d}')"
        REMOTE=$(echo "$SSH_CONFIG" | perl -lne 'print for / '"$NAME"' .*hostname +(.*)/g')
        if [ -z "$REMOTE" ]; then
            REMOTE=$NAME
        fi
        echo "$REMOTE"
    fi
}

#Convert a remote url to [ssh] hostname
#
# Supported remote url (as output by 'git remote -v'):
#
#   sshhost1:work/_git/keccak/CryptoDocuments
#   ssh://host2/srv/git/CryptoDocuments.git
#   sshhost3:private/git/CryptoDocuments.git
#   /media/NXP/CryptoDocuments.git
#   git://git.host5.org/project
#   git@host6.local:/home/localuser
#   git@host7:git/repo.git
#   sshhost8:private/git/project.git
#   /media/usbstick/myproject.git
#   ssh://host10/srv/git/myproject.git
#
#Params:
# URL    remote url
function url_to_hostname()
{
    local URL=$1
    if [ -n "$URL" ]; then
        sed -r '/:/!s/.*/localhost/; s!(ssh|git|http|https)://([^/]+)!\2:!g; s/^(.*@)?([\/.a-zA-Z0-9_-]+):.*/\2/g' <<< "$URL"
    fi
}





installcheck_does_not_exist()
{
    local DESC=$1
    local FILE=$2

    if [ -z "$FORCE" -a -e $FILE ]; then
        warning "Found $DESC file '$FILE', not overwriting (use '-f' to force)."
        return 1
    fi

    return 0
}

install_logrotate()
{
    if [ -d $(dirname $LOGROTATE) ]; then
        syslog "Installing logrotate file '$LOGROTATE'."

        cat > $LOGROTATE <<- __END__
			$LOGFILE
			{
			    rotate 4
			    weekly
			    missingok
			    notifempty
			    compress
			    delaycompress
			}
		__END__
        chmod 644 $LOGROTATE
    else
        warning "$(dirname $LOGROTATE) not found. Can't install logrotate script."
    fi
}

install_bin()
{
    syslog "Installing binary file '$PREFIX/$BASE'."

    cp $0 $PREFIX/$BASE
    chmod 755 $PREFIX/$BASE
}

install_linux_conf()
{
    installcheck_does_not_exist "config" $CONF || return
    syslog "Installing config file '$CONF'."

    if [ -e $CONF ]; then
        log 0 "Renaming old config file to '$CONF.old'"
        mv $CONF $CONF.old || die 1 "Cannot rename config file to '$CONF.old'."
    fi

    cat > $CONF <<- __END__
		## BORG_REPO - mandatory
		# BORG_REPO=username@remoteserver.com:borg
		# BORG_REPO=/smb/remoteserver/borg
		# BORG_REPO=borgserver:/volume1/homes/borg
		BORG_REPO=$BORG_REPO

		## DIRS - mandatory
		# DIRS='/home'
		# DIRS+=' /etc'
		DIRS='/home'

		## EXCLUDES - optional
		EXCLUDES='--exclude /var/cache'
		EXCLUDES+=' --exclude /var/log/journal'
		EXCLUDES+=' --exclude */.cache'
		EXCLUDES+=' --exclude *.nobak'
		EXCLUDES+=' --exclude */xapiandb'
		EXCLUDES+=' --exclude */.thumbnails'
		# EXCLUDES+=' --exclude *.vdi'
		# EXCLUDES+=' --exclude *.vmdk'

		## LOG_FILTER - optional
		# LOG_FILTER='sed -r "/Permission denied:|Device or resource busy:/d"'
		LOG_FILTER=

		## MAIL_xxx - optional
		MAIL_INFO='/usr/bin/mail -s"Borgcronic info" root'
		MAIL_WARNING='/usr/bin/mail -s"Borgcronic warning" root'
		MAIL_ERROR='/usr/bin/mail -s"Borgcronic ERROR" root'

		## DEVIL_PERIOD - optional
		# DEVIL_PERIOD=86400
		DEVIL_PERIOD=
	__END__
    chmod 644 $CONF
}

install_cygwin_conf()
{
    installcheck_does_not_exist "config" $CONF || return 0
    syslog "Installing config file '$CONF'."

    if [ -e $CONF ]; then
        log 0 "Renaming old config file to '$CONF.old'"
        mv $CONF $CONF.old || die 1 "Cannot rename config file to '$CONF.old'."
    fi

    cat > $CONF <<- __END__
		## BORG_REPO - mandatory
		# BORG_REPO=username@remoteserver.com:borg
		# BORG_REPO=/cygdrive/y
		# BORG_REPO=borgserver:/volume1/homes/borg
		BORG_REPO=$BORG_REPO

		## DIRS - mandatory
		DIRS='/cygdrive/c/Users'
		DIRS+=' /cygdrive/c/Program\\ Files'
		DIRS+=' /cygdrive/c/Program\\ Files\\ \\(x86\\)'
		DIRS+=' /cygdrive/c/ProgramData'

		## EXCLUDES - optional
		# EXCLUDES='--exclude */.cache'
		# EXCLUDES+=' --exclude *.nobak'
		EXCLUDES='--exclude-from $CONF_EXCLUDE'

		## LOG_FILTER - optional
		LOG_FILTER='sed -r "/Permission denied:|Device or resource busy:/d"'

		## MAIL_xxx - optional
		# MAIL_INFO='/usr/bin/mail -s"Borgcronic info" root'
		# MAIL_WARNING='/usr/bin/mail -s"Borgcronic warning" root'
		# MAIL_ERROR='/usr/bin/mail -s"Borgcronic ERROR" root'
		MAIL_INFO=
		MAIL_WARNING=
		MAIL_ERROR=

		## DEVIL_PERIOD - optional
		DEVIL_PERIOD=86400
	__END__
    chmod 644 $CONF

    installcheck_does_not_exist "config exclude" $CONF_EXCLUDE || return 0
    syslog "Installing config exclude file '$CONF_EXCLUDE'."

    if [ -e $CONF_EXCLUDE ]; then
        log 0 "Renaming old exclude file to '$CONF_EXCLUDE.old'"
        mv $CONF_EXCLUDE $CONF_EXCLUDE.old || die 1 "Cannot rename config file to '$CONF_EXCLUDE.old'."
    fi

    cat > $CONF_EXCLUDE <<- __END__
		/cygdrive/c/Users/*/AppData/Local/Application Data
		/cygdrive/c/Users/*/AppData/Local/Historique
		/cygdrive/c/Users/*/AppData/Local/History
		/cygdrive/c/Users/*/AppData/Local/Microsoft/Windows Defender/FileTracker
		/cygdrive/c/Users/*/AppData/Local/Microsoft/Windows/Explorer/thumbcache_*.db
		/cygdrive/c/Users/*/AppData/Local/Microsoft/Windows/History/History.IE5/MSHist*
		/cygdrive/c/Users/*/AppData/Local/Microsoft/Windows/Temporary Internet Files
		/cygdrive/c/Users/*/AppData/Local/Microsoft/Windows/UsrClass.dat*
		/cygdrive/c/Users/*/AppData/Local/Microsoft/Windows/WER
		/cygdrive/c/Users/*/AppData/Local/Mozilla/Firefox/Profiles/*/Cache
		/cygdrive/c/Users/*/AppData/Local/Mozilla/Firefox/Profiles/*/OfflineCache
		/cygdrive/c/Users/*/AppData/Local/Temp
		/cygdrive/c/Users/*/AppData/Local/Temporary Internet Files
		/cygdrive/c/Users/*/AppData/Roaming/Microsoft/Windows/Cookies
		/cygdrive/c/Users/*/AppData/Roaming/Microsoft/Windows/Recent
		/cygdrive/c/Users/*/AppData/Roaming/Microsoft/Windows/Start Menu/Programmes
		/cygdrive/c/Users/*/Application Data
		/cygdrive/c/Users/*/Cookies
		/cygdrive/c/Users/*/Documents/Ma musique
		/cygdrive/c/Users/*/Documents/Mes images
		/cygdrive/c/Users/*/Documents/Mes vidéos
		/cygdrive/c/Users/*/Documents/My Music
		/cygdrive/c/Users/*/Documents/My Pictures
		/cygdrive/c/Users/*/Documents/My Videos
		/cygdrive/c/Users/*/Local Settings
		/cygdrive/c/Users/*/Menu Démarrer
		/cygdrive/c/Users/*/Mes documents
		/cygdrive/c/Users/*/Microsoft/Windows/Start Menu/Programmes
		/cygdrive/c/Users/*/Modèles
		/cygdrive/c/Users/*/My Documents
		/cygdrive/c/Users/*/NetHood
		/cygdrive/c/Users/*/ntuser.dat*
		/cygdrive/c/Users/*/NTUSER.DAT*
		/cygdrive/c/Users/*/PrintHood
		/cygdrive/c/Users/*/Recent
		/cygdrive/c/Users/*/SendTo
		/cygdrive/c/Users/*/Start Menu
		/cygdrive/c/Users/*/Templates
		/cygdrive/c/Users/*/Voisinage d'impression
		/cygdrive/c/Users/*/Voisinage réseau
	__END__
    chmod 644 $CONF_EXCLUDE

    return 0
}

install_conf()
{
    [ "$OS" = "Windows_NT" ] && install_cygwin_conf || install_linux_conf
}

install_cron_daily()
{
    syslog "Installing cron daily job file '$CRON_DAILY'."

    ln -sf $PREFIX/$BASE $CRON_DAILY

    rm -f ${CRON_DAILY%%-summon-backup} ${CRON_DAILY%%-backup}   # TEMPORARY: Remove old cron daily
}

install_cron_weekly()
{
    syslog "Installing cron weekly job file '$CRON_WEEKLY'."

    ln -sf $PREFIX/$BASE $CRON_WEEKLY
}

install_linux_cron_d()
{
    syslog "Installing cron.d job file '$CRON_D'."

    [ -d $(dirname $CRON_D) ] || mkdir -m 755 -p $(dirname $CRON_D)

    cat > $CRON_D <<- __END__
		SHELL=/bin/sh
		PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/bin

		# Start $BASE every 6 hours during daylight
		5 11-23/6 * * * root [ -x $PREFIX/$BASE ] && perl -le 'sleep rand 900' && $PREFIX/$BASE summon-backup >/dev/null 2>&1
	__END__
    chmod 644 $CRON_D
}

install_cygwin_cron_d()
{
    syslog "Installing cron.d job file '$CRON_D'."

    [ -d $(dirname $CRON_D) ] || mkdir -m 755 -p $(dirname $CRON_D)

    cat > $CRON_D <<- __END__
		HOME=/
		SHELL=/bin/sh
		PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/bin

		# Start $BASE every 6 hours during daylight
		5 11-23/6 * * * SYSTEM [ -x $PREFIX/$BASE ] && perl -le 'sleep rand 900' && $PREFIX/$BASE summon-backup >/dev/null 2>&1
	__END__
    chown SYSTEM:SYSTEM $CRON_D
    chmod 644 $CRON_D

    return 0
}

install_cron_d()
{
    [ "$OS" = "Windows_NT" ] && install_cygwin_cron_d || install_linux_cron_d
}

install_linux_startup()
{
    syslog "Installing systemd service file '$SYSTEMD_SERVICE'."

    # Stop service if running
    systemctl is-active $BASE >/dev/null && systemctl stop $BASE

    cat > $SYSTEMD_SERVICE <<- __END__
		[Unit]
		Description=$BASE daemon
		After=network-online.target

		[Service]
		Type=simple

		User=root
		Group=root
		UMask=022

		ExecStart=$PREFIX/$BASE daemon

		Restart=on-failure

		# Configures the time to wait before service is stopped forcefully.
		TimeoutStopSec=300

		[Install]
		WantedBy=multi-user.target
	__END__
    chmod 644 $SYSTEMD_SERVICE

    systemctl daemon-reload
    systemctl enable $BASE
    systemctl start $BASE
}

CYGWIN_USER_STARTUP="/cygdrive/c/Users/$USERNAME/AppData/Roaming/Microsoft/Windows/Start Menu/Programs"
install_cygwin_startup()
{
    syslog "Installing startup script '$PREFIX/$CYGWIN_STARTUP_SCRIPT'."
    cp "cygwin/$CYGWIN_STARTUP_SCRIPT" $PREFIX/

    syslog "Installing shortcut '$CYGWIN_STARTUP_SCRIPT' in user Startup Programs group."
    mkshortcut --name="$CYGWIN_STARTUP_SCRIPT" -P "$PREFIX/$CYGWIN_STARTUP_SCRIPT"
    mv "$CYGWIN_USER_STARTUP/$CYGWIN_STARTUP_SCRIPT.lnk" "$CYGWIN_USER_STARTUP/Startup/"

    cygstart "$PREFIX/$CYGWIN_STARTUP_SCRIPT"

    return 0
}

install_startup()
{
    [ "$OS" = "Windows_NT" ] && install_cygwin_startup || install_linux_startup
}

print_size_summary()
{
    using_borg_server && return 0             # No size info available when using borg server
    log 1 "Borg repo: $(sizeof $BORG_REPO)"
    [ -d "$BORG_CACHE_DIR" ] && log 1 "Borg cache: $(sizeof $BORG_CACHE_DIR)"
}

check_root()
{
    [ $(whoami) == "root" ] || die 1 "Run this script as root or with sudo"
}

check_install_and_read_conf()
{
    # Check install
    [ -e $CONF ] || die 1 "'$CONF' not found. Did you run the install script '$BASE install <REPOSITORY>'"

    # Read conf
    BORG_REPO=
    DIRS=
    EXCLUDES=
    LOG_FILTER=
    MAIL_INFO=
    MAIL_WARNING=
    MAIL_ERROR=
    DEVIL_PERIOD=86400

    . $CONF

    export BORG_REPO
    export BORG_CACHE_DIR
    export BORG_KEYS_DIR
    export BORG_SECURITY_DIR
    [ -n "$LOG_FILTER" ] || LOG_FILTER=cat
    [ -n "$DEVIL_PERIOD" ] || DEVIL_PERIOD=86400

    # Check conf
    [ -n "$BORG_REPO" ] || die 1 "BORG_REPO not defined or empty in '$CONF'."
    [ -n "$DIRS" ]       || die 1 "DIRS not defined or empty in '$CONF'."
}

usage_help()
{
    cat <<- __END__
Usage: $BASE [-dfhv] backup|daemon|devil|exec ...|install [REPOSITORY]|last|summon|summon-backup|summon-last

$BASE only runs as root user, or using sudo.

The commands are:

    backup
        Starts a backup immediately.

    daemon
        Starts as a daemon. $BASE waits for summoning signals.

    devil
        Starts as a simpler daemon, which schedules automatically new backups
        at regular intervals.

    exec ...
        Run borg, passing the remaining parameters on the line
        to borg. This is handy to run borg using $BASE configuration.

    install [REPOSITORY]
        Install $BASE, configuration and script files, then run
        borg to initialize REPOSITORY. Use -f to force overwriting
        existing configuration files. REPOSITORY can be omitted if a configuration
        file exists already.

    last
        Print a summary of last archives found in the repository for each host.

    summon
    summon-backup
        Summons the daemon to trigger a backup.

    summon-last
        Summons the daemon to collect archives statistics as with LAST
        command, and to send the result by mail.

When invoked as '$BASE-COMMAND', the default command is 'COMMAND'. This is useful for 
cron jobs.

Options:

    -d
        Run borg in dry-run mode (only for DAEMON or EXEC command).

    -f
        Force overwriting existing files in INSTALL command.

    -h
        This help.

    -v
        Increase verbose level.

Examples:

    # LIST all archives
    sudo borgcronic exec list

    # EXTRACT some path from an archive
    # Note: path DO NOT start with a trailing '/'
    sudo borgcronic exec extract ::machine_20190101_1234 home/myuser

__END__
}

read_options()
{
    # Parse options
    VERBOSE=0
    DRYRUN=
    INSTALL_ARG=
    FORCE=

    local OPTIONS="dfhv"
    local usage="Usage: $BASE [-$OPTIONS] backup|daemon|devil|exec ...|install [REPOSITORY]|last|summon|summon-backup|summon-last"$'\n'"Type '$BASE -h' for help."
    while getopts "$OPTIONS" flag; do
        case "$flag" in
            d)
                # Enable dry-run
                DRYRUN=true
                ;;
            f)
                # Force flag for install mode
                FORCE=true
                ;;
            h)
                # Display help
                usage_help
                exit 0
                ;;
            v)
                # Increase Verbose level
                VERBOSE=$((VERBOSE+1))
                ;;
            *)
                die 1 "$usage"
                ;;
        esac
    done

    shift $((OPTIND-1))

    # Extract default command from invocation string
    BASENAME=$(basename $0)
    MODE=${1:-${BASENAME##$BASE-}}
    [ $MODE = $BASE ] && die 1 "$usage"

    # Process command
    case "$MODE" in
        exec|last)
            VERBOSE=1
            ;;
        install)
            INSTALL_ARG=$2
            VERBOSE=1
            ;;
        backup|devil)
            ;;
        daemon|summon|summon-backup|summon-last)
            ;;
        *)
            die 1 "$usage"
            ;;
    esac
    ((OPTIND++))
}

print_log_header()
{
    log 0 "####################################################################################################"
    log 0 "# Borg variables:"
    for v in $(env|perl -lne 'print for /^BORG_[A-Z_]*/g'); do        # Can't use ${!BORG_*} because we only want exported variables
        log 0 "    $v=${!v}"
    done
}

do_it()
{
    log 1 "$@"
    log 0 "===================================================================================================="
    "$@" |& eval $LOG_FILTER
    local RC=${PIPESTATUS[0]}
    log 0 "===================================================================================================="
    print_size_summary
    return $RC
}

start_logging()
{
    LOGGING=true
    LOG_PREFIX="[$1] "
    [ -d $(dirname $LOGFILE) ] || mkdir -p $(dirname $LOGFILE)
    if [ $VERBOSE -ge 1 ]; then
        exec > >(tee -a $LOGFILE ) 2>&1
    else
        exec >> $LOGFILE 2>&1
    fi
}

trywaitborg()
{
    local SEC_STARTING=0
    local SEC_DOING=0
    local OP=$1
    local FAIL_COUNT=0
    local FAIL_MAX=5
    local FAIL_WAIT=0
    local RC

    syslog Starting "'borg $OP'"
    SEC_STARTING=$SECONDS
    while : ; do
        # Wait for the repository to show up - MUST NOT when using SSH...
        while ! ishostavail $(ssh_gethost $(url_to_hostname $BORG_REPO)); do
            sleep $TRY_WAIT
        done

        # Do action
        syslog Doing "'borg $OP'"
        SEC_DOING=$SECONDS
        do_it borg "$@"
        RC=$?

        # If warning - Tell if we got a warning?
        [ $RC -eq 1 ] && warning "'borg $OP' returned a WARNING code. Please check '$LOGFILE'."

        # If warning or success - Exit
        [ $RC -le 1 ] && break

        # If error - Wait then retry at most FAILMAX times
        ((FAIL_COUNT++))
        syslog "FAIL -- 'borg $OP' failed. Retrying at most $FAIL_MAX times ($FAIL_COUNT/$FAIL_MAX)."
        [ $FAIL_COUNT -lt $FAIL_MAX ] || break

        ((FAIL_WAIT+=TRY_WAIT))
        sleep $TRY_WAIT
    done

    [ $FAIL_COUNT -lt $FAIL_MAX ] && set_op_timestamp $OP || set_op_timestamp $OP.fail

    syslog "Done 'borg $OP'" "(total $((SECONDS-SEC_STARTING))s, real $((SECONDS-SEC_DOING))s)"

    return $RC
}

tryborg()
{
    if [ "$MODE" = daemon -o "$MODE" = devil -o "$MODE" = backup ]; then
        trywaitborg "$@"
    else
        borg "$@"
    fi
}

borg_create()
{
    echo y | tryborg create ${DRYRUN:+--dry-run} -v --stats -x --compression lz4 \
        ::'{hostname}_{now:%Y%m%d_%H%M}'                                \
        $DIRS                                                           \
        $EXCLUDES                                                       \
        --exclude /dev --exclude /proc --exclude /sys --exclude /tmp --exclude /run \
        --exclude "$BORG_CACHE_DIR" --exclude "$BORG_KEYS_DIR" --exclude "$BORG_SECURITY_DIR"
    # We exclude some directories in case root partition is backed up. 
    # Ideally we should exclude $BORG_REPO. For now we assume it is excluded with -x.
}

borg_prune()
{
    # Use the `prune` subcommand to maintain 7 daily, 4 weekly and 6 monthly
    # archives of THIS machine. The '{hostname}_' prefix is very important to
    # limit prune's operation to this machine's archives and not apply to
    # other machine's archives also.
    tryborg prune ${DRYRUN:+--dry-run} -v --list \
        :: --prefix '{hostname}_'                \
        --keep-daily=7 --keep-weekly=4 --keep-monthly=6
}

lock_get()
{
    while ! mkdir $LOCKDIR &> /dev/null; do
        # Lock failed. Check if the other pid is alive
        OTHERPID="$(cat "$PIDFILE")" || die 99 "lock failed, but cannot get other pid."

        if ! kill -0 $OTHERPID &> /dev/null; then
            # lock is stale, remove it and retry
            # TODO: fix race condition - another script may rm $LOCKDIR && mkdir $LOCKDIR here
            rm -r "$LOCKDIR" || die 99 "lock failed, but cannot rm lockdir"
        else
            die 99 "Lock failed, '$LOCKDIR' owned by pid $OTHERPID."
        fi
    done

    echo $BASHPID > $PIDFILE
    trap 'trap - INT TERM EXIT; syslog "[daemon] exorcized..."; rm -rf "$LOCKDIR"; exit $?' INT TERM EXIT
}

execute-backup()
{
    # Print log header
    print_log_header

    borg_create && borg_prune
}

execute-last()
{
    # Print log header
    print_log_header

    [ -n "$MAIL_INFO" -a -x "${MAIL_INFO%% *}" ] || return 1

    out="$(cmd_last)"
    echo "Hello master,

This is $BASE, your backup servant.

Please find below the summary of last backups on $BORG_REPO.

$out" | eval $MAIL_INFO
}

cmd_backup()
{
    lock_get                                                # Get the lock

    start_logging B                                         # Start logging

    execute-backup

    # Release the lock - On SIGINT / SIGTERM / SIGEXIT
}

cmd_daemon()
{
    lock_get                                                # Get the lock

    start_logging D                                         # Start logging

    rm -f $FIFOFILE                                         # Create our fifo we will listen on
    mkfifo -m 600 $FIFOFILE
    [ "$OS" != "Windows_NT" ] && exec 3<>$FIFOFILE          # Open in/out FD on fifo...
                                                            # .. so writers are not blocked / SIGPIPE'd
                                                            # [Cygwin] This does not work. 2nd request will block!
    while : ; do
        if [ "$OS" = "Windows_NT" ] || \
           ! read -t 0 R <$FIFOFILE; then                   # If on Cygwin or no pending request
            unset IGNORE                                    # ... clear ignore list
            syslog "[daemon] Waiting for minions..."        # ... notify syslog
        fi

        declare -A IGNORE

        read R <$FIFOFILE                                   # Get next request
        syslog "[daemon] Got '$R' signal."
        [ -z "${IGNORE[$R]}" ] || continue                  # Skip request if in the ignore list

        case "$R" in
            B)
                execute-backup
                ;;
            L)
                execute-last
                ;;
        esac

        IGNORE[$R]=x                                        # Add last request to ignore list
    done

    # Release the lock - On SIGINT / SIGTERM / SIGEXIT
}

cmd_devil()
{
    lock_get                                                # Get the lock

    start_logging d                                         # Start logging

    local CMD=devil

    while : ; do
        TS=$(get_op_timestamp $CMD)
        NOW=$(get_timestamp)
        if [ -n "$TS" ]; then
            TSEC=$(date +%s -d "$TS")
            TSECNOW=$(date +%s -d "$NOW")
            TSECNEXT=$((TSEC + $DEVIL_PERIOD - TSEC % $DEVIL_PERIOD ))

            if [ $TSECNEXT -gt $TSECNOW ]; then
                SEC=$((TSECNEXT - TSECNOW))
                SEC=$((SEC + 300 + RANDOM % 900))           # Fixed (not at boot) + random delay (spread load)
                syslog "[devil] Next backup will occur in $SEC seconds."
                sleep $SEC
            fi
        fi

        execute-backup

        set_op_timestamp $CMD
    done
}

cmd_exec()
{
    borg ${DRYRUN:+--dry-run} "$@"
}

cmd_install()
{
    log 0 "[INSTALL] Installing $BASE."

    if [ -n "$INSTALL_ARG" ]; then
        BORG_REPO=$INSTALL_ARG
    else
        [ -e $CONF ] || die 1 "No REPOSITORY given and '$CONF' not found.'"
        . $CONF
        [ -n "$BORG_REPO" ] || die 1 "No BORG_REPO found in '$CONF'. Please delete it and restart.'"
    fi

    mkdir -p $BORG_REPO || die 1 "Cannot create repository dir '$BORG_REPO'"

    # Install configuration and scripts files
    if [ "$OS" = "Windows_NT" ]; then
        # Cygwin
        install_bin
        install_conf
        # install_cron_d                         # TODO: Allow choosing between daemon/devil on cygwin?
        install_startup
    else
        # Linux
        install_bin
        install_conf
        install_logrotate
        install_cron_daily
        install_cron_weekly
        install_cron_d
        install_startup
    fi

    # Read and check configuration
    check_install_and_read_conf

    # Start logging
    start_logging I

    log 0 "[INSTALL] $BASE installed successfully."
    if using_borg_server; then
        log 0 "[INSTALL] Skipping 'borg init' when using borg server."
    else
        if [ -e "$BORG_REPO/README" -a -d "$BORG_REPO/data" ]; then
            log 0 "[INSTALL] Borg repository already initialized. Skipping 'borg init' step..."
        else
            log 0 "[INSTALL] Initializing Borg repository..."
            do_it ${DRYRUN:+echo} borg init -e none :: || die 1 "borg init failed."
        fi
    fi
}

cmd_last()
{
    local out=$(tryborg list)
    local sep1=$(date +"--- Now -------------------------------------------------------------- _%Y%m%d_%H%M" -d "now")
    local sep2=$(date +"--- Yesterday -------------------------------------------------------- _%Y%m%d_%H%M" -d "yesterday")
    local sep3=$(date +"--- 2 days ago ------------------------------------------------------- _%Y%m%d_%H%M" -d "2 days ago")
    local sep4=$(date +"--- 3 days ago ------------------------------------------------------- _%Y%m%d_%H%M" -d "3 days ago")
    local sep5=$(date +"--- Last week -------------------------------------------------------- _%Y%m%d_%H%M" -d "last week")

    export LC_ALL=C
    echo "$out"$'\n'"$sep1"$'\n'"$sep2"$'\n'"$sep3"$'\n'"$sep4"$'\n'"$sep5" \
        | sort -r \
        | sort -t_ -u -k1,1 \
        | sort -r -t_ -k2 \
        | sed -r '/^---/{s/_.*//; s/^|$/\n/g; b}; s/\[.*//'
}

cmd_summon-backup()
{
    # Start logging
    start_logging SB

    # Summon the daemon
    syslog "Summon the daemon. Sending signal 'backup'..."
    [ -e $FIFOFILE ] && echo B >$FIFOFILE
}

cmd_summon-last()
{
    # Start logging
    start_logging SL

    # Summon the daemon
    syslog "Summon the daemon. Sending signal 'last'..."
    [ -e $FIFOFILE ] && echo L >$FIFOFILE
}

# Read CLI options
read_options "$@"
shift $((OPTIND-1))

# Must be root
[ "$OS" = "Windows_NT" ] || check_root

# Read and check configuration, unless if installing
[ "$MODE" = install ] || check_install_and_read_conf

# TODO: Is current locking sufficient? Do we need more to protect log file access, cache update... ?
case $MODE in
    backup)
        cmd_backup "$@"
        ;;
    daemon)
        cmd_daemon "$@"
        ;;
    devil)
        cmd_devil "$@"
        ;;
    exec)
        cmd_exec "$@"
        ;;
    install)
        cmd_install "$@"
        ;;
    last)
        cmd_last "$@"
        ;;
    summon | summon-backup)
        cmd_summon-backup "$@"
        ;;
    summon-last)
        cmd_summon-last "$@"
        ;;
esac

