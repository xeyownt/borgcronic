#! /bin/bash

# Common settings
BASE=borgcronic
LOGFILE=/var/log/$BASE
CONF=/etc/$BASE.conf
LOGROTATE=/etc/logrotate.d/$BASE
LOCKDIR=/var/lock/$BASE
PIDFILE=/var/lock/$BASE/pid
FIFOFILE=/var/run/$BASE.fifo
TRY_WAIT=120               # (seconds) Delay to wait before trying again

# Borg environment variables (see https://borgbackup.readthedocs.io/en/stable/usage.html)
export BORG_CACHE_DIR=/var/cache/borg
export BORG_KEYS_DIR=/var/lib/borg/keys
export BORG_SECURITY_DIR=/var/lib/borg/security
BORG_LASTSUCCESSFUL=$BORG_CACHE_DIR/$BASE.success

log()
{
    LVL=$1
    shift
    case "$LVL" in
        0)
            echo "$@"
            ;;
        1)
            echo "# $(date): $@"
            ;;
        2)
            echo "## $@"
            ;;
        *)
            echo "Unknown level '$LVL'"
            ;;
    esac
}

syslog()
{
    logger --id=$$ -t $BASE "$@"
    log 1 "$@"
}

die()
{
    CODE=$1
    shift
    >&2 syslog "ERROR -- $@"
    exit $CODE
}

warning()
{
    >&2 syslog "WARNING -- $@"
}

sizeof()
{
    du -sB1 "$@" | awk '{s+=$1} END {printf "%dM (%d)",s/(2**20),s}'
}

check_or_install_logrotate()
{
    [ -e $LOGROTATE ] && return

    if [ -d $(dirname $LOGROTATE) ]; then
        syslog "Installing logrotate file '$LOGROTATE'."
        cat > $LOGROTATE <<- __END__
/var/log/$BASE
{
    rotate 4
    weekly
    missingok
    notifempty
    compress
    delaycompress
}
__END__
        chmod 644 $LOGROTATE
    else
        warning "$(dirname $LOGROTATE) not found. Can't install logrotate script."
    fi
}

check_or_install_conf()
{
    [ -e $CONF ] && return

    syslog "Installing config file '$CONF'."
    cat > $CONF <<- __END__
## BORG_REPO - mandatory
#BORG_REPO=username@remoteserver.com:backup

## DIRS - mandatory
DIRS='/home'

## EXCLUDES - optional
EXCLUDES='--exclude */.cache'
EXCLUDES+=' --exclude *.nobak'
EXCLUDES+=' --exclude */xapiandb'
EXCLUDES+=' --exclude */.thumbnails'
__END__
    chmod 644 $CONF
}

check_or_install_fifo()
{
    [ -e $FIFOFILE ] || mkfifo -m 600 $FIFOFILE
}

print_size_summary()
{
    log 2 "Borg repo: $(sizeof $BORG_REPO)"
    log 2 "Borg cache: $(sizeof $BORG_CACHE_DIR)"
}

check_root()
{
    [ $(whoami) == "root" ] || die 1 "Run this script as root or with sudo"
}

read_and_check_conf()
{
    BORG_REPO=
    DIRS=
    EXCLUDES=
    [ -e $CONF ] || die 1 "'$CONF' not found."
    . $CONF
    export BORG_REPO
    export BORG_CACHE_DIR
    export BORG_KEYS_DIR
    export BORG_SECURITY_DIR

    [ -n "$BORG_REPO" ] || die 1 "BORG_REPO not defined or empty in '$CONF'."
    [ -n "$DIRS" ]       || die 1 "DIRS not defined or empty in '$CONF'."
    [ -d "$BORG_REPO" ] || die 1 "'$BORG_REPO' not found."
}

read_options()
{
    # Parse options
    VERBOSE=0
    DIRS_STAT=
    EXEC=
    DRYRUN=
    DAEMON=

    local OPTIONS="Ddsvx"
    while getopts "$OPTIONS" flag; do
        case "$flag" in
            D)
                # DAEMON mode
                DAEMON=true
                ;;
            d)
                # dry-run mode
                DRYRUN=true
                ;;
            s)
                # Display DIRS statistics
                DIRS_STAT=true
                ;;
            v)
                # Verbose mode
                VERBOSE=$((VERBOSE+1))
                ;;
            x)
                # Execute mode
                EXEC=true
                VERBOSE=1
                break
                ;;
            *)
                echo "Usage: $BASE.sh [-$OPTIONS]"
                exit 1
                ;;
        esac
    done
}

print_log_header()
{
    log 0 "####################################################################################################"
    log 1 "Start $BASE[$$]"
}

print_log_footer()
{
    log 1 "End $BASE[$$]"
}

doit()
{
    log 1 "## $@"
    print_size_summary
    log 0 "===================================================================================================="
    "$@"
    log 0 "===================================================================================================="
    print_size_summary
    # TODO: We must return exit status of "$@" !
}

print_dirs_stats()
{
    if [ -n "$DIRS_STAT" ]; then
        DIRS_SZ=$(sizeof $DIRS)
        DIRS_ND=$(find $DIRS -type d|wc -l)
        DIRS_NF=$(find $DIRS -type f|wc -l)
        log 2 "* $DIRS_SZ, $DIRS_ND directories, $DIRS_NF files."
    fi
}

start_logging()
{
    [ -d $(dirname $LOGFILE) ] || mkdir -p $(dirname $LOGFILE)
    if [ $VERBOSE -ge 1 ]; then
        exec > >(tee -a $LOGFILE ) 2>&1
    else
        exec >> $LOGFILE 2>&1
    fi
}

tryborg()
{
    local SEC_STARTING=0
    local SEC_DOING=0

    syslog Starting "'borg $1'"
    SEC_STARTING=$SECONDS
    while : ; do
        # Wait for the repository to show up
        while ! [ -f $BORG_REPO/README ]; do
            sleep $TRY_WAIT
        done

        # Do action
        syslog Doing "'borg $1'"
        SEC_DOING=$SECONDS
        doit borg "$@"

        # Action successful - exit
        [ $? -eq 0 ] && break

        # Action failed - Wait then retry
        syslog Failed "'borg $1'"
        sleep $TRY_WAIT
    done

    touch $BORG_LASTSUCCESSFUL.$1
    syslog Done "'borg $1'" "(total $((SECONDS-SEC_STARTING))s, real $((SECONDS-SEC_DOING))s)"
}

borg_exec()
{
    tryborg ${DRYRUN:+--dry-run} "$@"
}

borg_init()
{
    log 1 "Init borg repository $BORG_REPO"
    doit ${DRYRUN:+echo} borg init -e none ::
}

borg_create()
{
    tryborg create ${DRYRUN:+--dry-run} -v --stats -x --compression lz4 \
        ::'{hostname}-{now:%Y-%m-%d_%H%M}'                              \
        $DIRS                                                           \
        $EXCLUDES
}

borg_prune()
{
    # Use the `prune` subcommand to maintain 7 daily, 4 weekly and 6 monthly
    # archives of THIS machine. The '{hostname}-' prefix is very important to
    # limit prune's operation to this machine's archives and not apply to
    # other machine's archives also.
    tryborg prune ${DRYRUN:+--dry-run} -v --list \
        :: --prefix '{hostname}-'                \
        --keep-daily=7 --keep-weekly=4 --keep-monthly=6
}

lock_get()
{
    while ! mkdir $LOCKDIR &> /dev/null; do
        # Lock failed. Check if the other pid is alive
        OTHERPID="$(cat "$PIDFILE")" || die 99 "lock failed, but cannot get other pid."

        if ! kill -0 $OTHERPID &> /dev/null; then
            # lock is stale, remove it and retry
            rm -r "$LOCKDIR" || die 99 "lock failed, but cannot rm lockdir"
        else
            die 99 "Lock failed, '$LOCKDIR' owned by pid $OTHERPID."
        fi
    done

    echo $$ > $PIDFILE
    trap 'trap - INT TERM EXIT; rm -rf "$LOCKDIR"; exit $?' INT TERM EXIT
}

lock_exit()
{
    exit 0
}

main()
{
    # Get the lock
    lock_get

    # Start logging and print a few statistics
    start_logging

    while : ; do
        # If in daemon mode, we wait for wake-up (WUP) signal...
        if [ -n $DAEMON ]; then
            syslog "Waiting for wake-up signal..."
            read S <$FIFOFILE
            [ "$S" = "WUP" ] || continue
        fi

        # Print a few statistics
        print_log_header
        print_dirs_stats

        if [ -n "$EXEC" ]; then
            borg_exec "$@"
        else
            # Do the backup
            if ! [ -d $BORG_CACHE_DIR ]; then
                borg_init
            fi
            borg_create
            borg_prune
        fi

        # End logging
        print_log_footer

        # We loop again, unless we are not in daemon mode
        [ -z $DAEMON ] && break
    done

    # Release the lock
    lock_exit
}

# Must be root
check_root

# Read CLI options
read_options "$@"
shift $((OPTIND-1))

# Check or perform install
check_or_install_logrotate
check_or_install_conf
check_or_install_fifo

# Read and check configuration
read_and_check_conf

# Run main process
main "$@"
